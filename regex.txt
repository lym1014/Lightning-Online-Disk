正则表达式（regex）
    定义：使用字符和特殊符号组成的能够描述某一类字符串的表达式
    动机：1.文本处理成为计算机的常见工作
          2.文本处理中，根据内容筛选查找匹配指定的内容是常用的功能之一
          3.方便快速的解决上述问题，正则表达式应运而生
    特点和具体使用：是一种高级的文本搜索匹配模式，提供了丰富的功能
                    正则表达式支持多种语言，使用方便
                    mongodb 可以存储正则表达式
                    在爬虫中大量使用正则表达式进行html文本的匹配
                    django，tornado等框架中，路由的匹配

正则表达式规则及元字符
    元字符： 正则表达式中定义的，具有特定意义的符号
    import re                   re模块是python的标准库模块，是用来处理正则表达式的
    re.findall(regex,string)    使用regex去匹配字符串中的内容，如果匹配到则以一个列表的方式进行返回


      字符功能                  元字符            匹配规则
    普通字符                      abc          匹配字符串的内容                                       re.findall('abc','abcdeabc')            ['abc', 'abc']
    连接多个正则表达式          abc|def        既能匹配abc  也能匹配def                               re.findall('ab|de','abcdeabc')          ['ab', 'de', 'ab']
    匹配个字符                     +           匹配前面出现的字符或正则表达式1次或者多次              re.findall('ab+','abbbb')               ['abbbb']
    匹配字符 0 次或1任意一个字符   .           使用.代表任意一个字符，不能代表\n                      re.findall('f.o','foo,f@oabfabo')       ['foo', 'f@o']
    匹配开头子串                   ^           匹配一个字符串的开头位置                               re.findall('^From','From China')        ['From']
    匹配字符串的结尾               $           当一个字符串以什么结尾时使用$标记                      re.findall('py$','test.py')             ['py']
    匹配任意0个或多个字符          *           匹配前面出现的字符或正则表达式0次或者多次              re.findall('.*','askjdfh89w4234')       ['askjdfh89w4234', '']
    匹配任意1个或多次              ？          匹配前面出现的字符或正则表达式0次或1次                 re.findall('ab?','a')                   ['a']
    匹配前面的字符或re指定次数    {N}          匹配前面出现的字符或正则表达式N次                      re.findall('ab{3}','abbbbbb')           ['abbb']
    匹配前面的字符或re指定次数   {M,N}         匹配前面出现的字符或正则表达式M 到 N次                 re.findall('ab{3,8}','abbb')            ['abbb']
    字符集合匹配                 [abcd]        匹配中括号中任意一个字符                               re.findall('b[abc123]t','bat,b1tba3t')  ['bat', 'b1t']
    字符集合匹配               [a-zA-Z0-9]     匹配中括号中任意一个区间内的一个字符                   re.findall('[a-zA-Z0-9]+','adf$&^%123') ['adf', '123']
    字符集合不匹配               [^...]        匹配任意非中括号中的字符集                             re.findall('[^a-z]','abc1j2^&d')        ['1', '2', '^', '&']
    匹配(非)数字字符     \d  [0-9]   \D [^0-9] \d 匹配任意一个数字字符                                re.findall('\d{3}','hello 1234')        ['123']
                                                    \D 匹配任意一个非数字字符                             re.findall('\D{3}','hello 1234')        ['hel', 'lo ']
    匹配(非)字母数字字符 \w\W   [a-zA-Z0-9]    \w 匹配任意一个字母或数字字符                          re.findall('[A-Z]\w*','Hello World')    ['Hello', 'World']
                                                    \W 匹配任意一个非字母或数字字符                       re.findall('\w+-\d+','xiaoming-56')     ['xiaoming-56']
    匹配(非)空字符                \s   \S      \s 匹配任意一个空字符                                  re.findall('hello\s+world','hello   world')  ['hello   world']
                                                    \S 匹配任意一个非空字符                               re.findall('\S*','helloworld&* ask')    ['helloworld&*', '', 'ask', '']
    匹配字符串头和结尾  开    \A  (^)  \Z ($)  \A 匹配字符串的开头位置                                re.findall('\Aabc\Z','abcabc')          []
                                                    \Z 匹配字符串的结尾位置                               re.findall('\Aabc\Z','abc')         ['abc']
    匹配（非）单词边界          \b   \B        将非字母的部分不认为是单词部分                         re.findall(r'\bis\b','This is a %test%')['is']
                                               将连续字母的部分认为是一个单词                         re.findall(r'is\b','This is a %test%')  ['is', 'is']
                                                    数字和下划线被认为可以是单词中的一部分

元字符总结
    字符 ： 匹配实际字符
    匹配单个字符：  .   []   \d  \D  \w \W  \s  \S
    匹配重复次数： *   +   ？  {}
    匹配开头结尾： ^  $  \A  \Z   \b  \B
    其他 ： |    [^ ]

raw原始字符串
    r“hello world”   ->  raw字串
    raw字串特点 ： 不进行转义解析
    “hello \n world”    -> \n表示换行
    r"hello \n world"   -> \n表示两个字符

    什么时候加r
    转为raw字符串是为了防止python对字符串的转义解析，所以在正则表达式本身有“\”的时候最好加上r
    当正则表达式中要匹配 \ * . ? {} [] () " ' 这些字符时需要使用'\'进行转义，此时如果为了避免字符串 解析为 正则表达式待来的麻烦，最好使用raw字符串

贪婪和非贪婪
    贪婪模式 ： 正则表达式默认是贪婪模式。即 在使用 *   +  ？  {M,N} 的时候尽可能多的向后进行匹配。
    非贪婪模式：尽可能少的匹配符合正则条件的内容
        贪婪模式 ---》 非贪婪模式 方法：后面加“？”
        即 *？   +？   ？？  {M,N}？

正则表达式分组
    ((ab)*(cd))
    正则表达式 (ab)*cd
    1. 正则表达式可以分组，分组的标志即括号()，每个括号都是正则表达式的一个子组，而每个子组是整体正则表达式的一部分，同时也是一个小的正则表达式
    2. 当有多个子组的时候，我们从外层向内侧分别叫第一，第二....子组。当同一层次的时候，从左向右分别计数
    3. 分组会影响* + ？ {}  的重复行为，即把每个分组当做一个整体对待，进行相应的重复操作
    4. 当子组能后和多个目标字符串内容进行匹配时，只返回一个内容

给子组命名
    格式： (?P<word>hello)
    给子组(hello) 起一个名字，这个名字是 “word”
    子组通过名字进行调用 (?P=word)  表示复制子组正则表达式内容

浮点数   ^-?\d+\.\d+$
整数或浮点数   ^-?\d+(\.\d+)?$

模块接口
    compile()   生成一个正则表达式对象
                传入一个正则表达式
                返回正则表达式相应对象
    正则表达式对象的一些属性函数 同 re模块可调用的一些函数函数名相同，用法相近
    这些函数多为常用的匹配显示函数
    功能相同，使用的区别上只是用re直接调用的时候，第一个参数需要传入正则表达式，使用compile对象调用的时候则不用

findall(string)    获取字符串中所有能够被正则表达式匹配的字串，以列表返回。如果加子组则返回每个子组中的内容
finditer           同findall 只是返回的是一个迭代器，每次迭代取得的是一个match对象
matchobj.group()   可以获取匹配的具体内容
split              将一个字符串，按照正则表达式的匹配内容进行分割，得到分割后的列表
sub(replacestr,string,max=0)  使用replacestr的内容，替换string字符串中能被正则表达式匹配的部分
                               max：最多替换max处
subn 同sub 只不过返回值多一个实际替换的个数

match   匹配正则表达式对应的内容，但是只能匹配一项
        match所匹配的内容要求必须在正则表达式的起始位置，否则匹配不到。
        match匹配到对应内容返回match object 否则返回None
search：同match
    匹配正则表达式对应的内容，但是只能匹配一项
    search匹配到对应内容返回match object 否则返回None
    search所匹配的内容并不要求位置，这是和match函数不同的

显示匹配结果
    group([n])
        功能：显示匹配到的字符串
        参数：如果不加默认为0  表示返回整体的匹配结果
              如果加一个数字，表示返回对应的组的匹配结果
        返回值：返回相应的匹配结果

    groups()
        匹配到的所有的组的内容，以一个元组返回

    groupdict()
        获取所有捕获组的内容，以字典反馈

flags 匹配选项
    作用：更加灵活的控制匹配内容
    compile findall match search finditer sub subn split 中的形参
    使用re调用时均有这个形参，使用compile对象调用时在compile函数中添加次形参即可
        值                              作用
    I，IGNORECASE                    忽略大小写
    S，DOTALL                        对元字符 .  起作用  能匹配\n
    M,MULTILINE                      对元字符^ $ 起作用  匹配开头结尾时计算换行
    X,VERBOSE                        可以给正则表达式添加注释， 但是实际使用会显得混乱

电子词典
    1.注册（接收用户信息，存储到数据库）
    2.登陆（接收登陆信息，进行查询） 登陆之后才能进行二级操作
    3.查词（接收客户端词语，返回解释）（文件的逻辑操作，保存到数据库）
    4.查看历史记录  （根据登陆用户查询历史记录）
    5.退出
数据库
    能保存用户信息    能保存查询记录
查词（文本操作）
    根据单词本查询     每个单词占一行    单词和解释之间一定有空格 单词在单词本中按顺序排列
运行要求
    建立客户端服务器，按要求完成代码实现  允许多个客户端同时操作


创建设计数据库
    用户信息(name prikey  ， pswd)
    历史记录()











